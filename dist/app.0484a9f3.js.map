{"version":3,"sources":["../node_modules/hex-rgb/index.js","app.ts"],"names":["hexCharacters","match3or4Hex","match6or8Hex","nonHexChars","RegExp","validHexSize","module","exports","hex","options","test","TypeError","alpha","replace","length","parseInt","slice","repeat","num","red","green","blue","format"],"mappings":"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","file":"app.0484a9f3.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nmodule.exports = (hex, options = {}) => {\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n\t\tthrow new TypeError('Expected a valid hex string');\n\t}\n\n\thex = hex.replace(/^#/, '');\n\tlet alpha = 1;\n\n\tif (hex.length === 8) {\n\t\talpha = parseInt(hex.slice(6, 8), 16) / 255;\n\t\thex = hex.slice(0, 6);\n\t}\n\n\tif (hex.length === 4) {\n\t\talpha = parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n\t\thex = hex.slice(0, 3);\n\t}\n\n\tif (hex.length === 3) {\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t}\n\n\tconst num = parseInt(hex, 16);\n\tconst red = num >> 16;\n\tconst green = (num >> 8) & 255;\n\tconst blue = num & 255;\n\n\treturn options.format === 'array' ?\n\t\t[red, green, blue, alpha] :\n\t\t{red, green, blue, alpha};\n};\n","const hexRgb = require('hex-rgb')\n\nasync function proxy (url) {\n  if (process.env.NODE_ENV === 'development') {\n    try {\n      await fetch('http://localhost:3000')\n    } catch (err) {\n      throw new Error('Local CORS proxy not started, run `docker-compose up`')\n    }\n    return `http://localhost:3000/${url}`\n  }\n  return url\n}\n\nasync function download (paletteId) {\n  try {\n    const sketchPalettes = await fetch(await proxy(`https://raw.githubusercontent.com/andrewfiorillo/sketch-palettes/master/Sketch%20Palettes.sketchplugin/Contents/Sketch/manifest.json`))\n    const manifest = await sketchPalettes.json()\n    const palettes = await fetch(await proxy(`https://www.colourlovers.com/api/palette/${paletteId}?format=json`))\n    const [ selectedPalette ] = await palettes.json()\n    const colors = selectedPalette.colors.map(hex => hexRgb(hex)).map(rgba => ({\n      red: rgba.red / 255,\n      green: rgba.green / 255,\n      blue: rgba.blue / 255,\n      alpha: 1,\n    }))\n    const fileData = {\n      compatibleVersion: '2.0',\n      pluginVersion: manifest.version,\n      colors,\n      gradients: [],\n      images: []\n    }\n    const encodedFileData = encodeURIComponent(JSON.stringify(fileData))\n    const dataURI = `data:text/json;charset=utf-8,${encodedFileData}`\n    const downloadEl = document.createElement('a')\n\n    downloadEl.setAttribute('href', dataURI)\n    downloadEl.setAttribute('download', `${selectedPalette.title}.sketchpalette`)\n    downloadEl.click()\n  } catch (err) {\n    console.warn(err.message)\n  }\n}\n\ndownload(1332140)\n"]}